import { useEffect,useState } from "react";
import { Link } from "react-router-dom";
import IndexCard from './components/IndexCard';
import { useNavigate } from 'react-router-dom'; // üëà –¥–æ–±–∞–≤–∏—Ç—å

interface Index {
  id: string;
  name: string;
  description: string;
  rating:number
  averageRating: number
  countRating: number
}

interface User {
  username: string;
}
interface ApiIndicesResponse {
  indices: Array<Omit<Index, 'averageRating'>>;
}
export default function HomePage() {

  const [user, setUser] = useState<User | null>(null);
  const [indices, setIndices] = useState<Index[]>([]);
  const [page, setPage] = useState(0);
  const navigate = useNavigate(); // üëà –¥–æ–±–∞–≤–∏—Ç—å
useEffect(() => {
  const token = localStorage.getItem('token');



    fetch("http://127.0.0.1:8000/user", {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    })
    .then(async response => response.json())
    .then(data => setUser(data.username));

    loadMoreIndices(1);
  }, []);
function loadMoreIndices(page: number) {
  fetch(`http://127.0.0.1:8000/api/indices?page=${page}&per_page=12`)
    .then(res => res.json())
    .then((data: ApiIndicesResponse) => { // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
      const indicesWithRating = data.indices.map(index => ({
        ...index,
        rating: Math.floor(Math.random() * 5) + 1,
        averageRating: Math.floor(Math.random() * 5) + 1, // –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        countRating: Math.floor(Math.random() * 100) + 1 // –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
      }));
      if (indicesWithRating.length === 0) return;
      setIndices(prev => [...prev, ...indicesWithRating]);
      setPage(page);
    });
}
 const handleLogout = async (e:any) => {
    e.preventDefault();  // —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await fetch("http://127.0.0.1:8000/logout");  // –≤—ã–∑–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞ (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ —Ç—Ä–µ–±—É–µ—Ç)
    localStorage.removeItem("token");  // –æ—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞
    setUser(null);
  };
  return (
    <div className="container">
      <h1 className="header">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ IndexHub</h1>

      <div className="auth-section">
        {user ? (
          <>
            <a href="/home" className="button secondary">–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</a>
            <a href="/make_index" className="button primary">–°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å</a>
                <a href="/logout" className="button danger" onClick={handleLogout}>
      –í—ã–π—Ç–∏
    </a>
          </>
        ) : (
          <>
            <a href="/login" className="button primary">–í–æ–π—Ç–∏</a>
            <a href="/register" className="button accent">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</a>
          </>
        )}
      </div>

      <h2 className="section-title">–ü—É–±–ª–∏—á–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã</h2>
        <div className="grid">
          {indices.map(index => (
            <IndexCard key={index.id} index={index} />
          ))}
        </div>

      <div className="load-more">
        <button
          className="button primary"
          onClick={() => loadMoreIndices(page + 1)}
        >
          –ó–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ
        </button>
      </div>
    </div>
  );
}